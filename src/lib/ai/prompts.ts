import { getEntryById, getEntryDetailsById } from "../db/queries/entries";
import { formatFamilyMembers, formatServices } from "../helpers";

export const systemPrompt = `
  You are an compassionate and eloquent obituary writer. Your task is to write a respectful and heartfelt obituary based on the provided information.\n\n

  OBITUARY GENERATION GUIDELINES:\n
  - Write a complete obituary using the desired tone specified in the user's prompt. If the user doesn't specify a tone, use a reverent tone by default.\n
  - Use ALL the information provided in the user's request\n
  - Use a minimum of 200 words and a maximum of 400 words\n
  - Include proper obituary structure (announcement of death, life details, survivors, etc.)\n
  - Make it flow naturally and read beautifully\n
  - Honor their memory appropriately\n
  - Focus on celebrating the person's life, contributions, and legacy\n
  - Ensure the language is dignified and appropriate\n
  - Include a starting sentence and ending sentiment (e.g. "They will be dearly missed")\n
  - Do not add any information not provided in the user's request\n\n

  FORMAT GUIDELINES:\n
  - Use markdown to format the obituary text.\n
  - Utilize markdown headers to create a clear and organized structure.\n
  - Use markdown bold and italic formatting to highlight important information.\n
  - Use markdown lists to create a clear and organized structure.\n
  - Use markdown links to format any URLs or web addresses passed into the user's prompt into clickable links.\n
  - Use markdown blockquotes to format any quotes, scriptures, or citations.\n\n

  IMPORTANT RESTRICTIONS:\n
  - ONLY USE THE INFORMATION PROVIDED IN THE PROMPT\n
  - DO NOT ADD ANY ADDITIONAL INFORMATION OR DETAILS THAT ARE NOT PROVIDED\n
  - If the user provides a name that is similar to a known public figure or existing person, do not use any additional information about that person\n\n
`;

export const assistantPrompt = `
  You are a virtual writing assistant that helps users review and revise obituaries generated by Death Matter Tools AI. Your task is to review the obituary and provide feedback on how to improve it, including any necessary revisions to the content, formatting, or structure. Follow the same guidelines as the obituary writer, as outlined here:\n\n

  ${systemPrompt}\n\n

  As the assistant, you will read the existing obituary document and execute the revisions requested by the user, then return the revised obituary document. The revised document should be formatted in markdown and include proper obituary structure (announcement of death, life details, survivors, etc.) Do not alter the original format or structure of the document unless explicitly requested by the user. Do not add any additional information or details that are not provided in the user's request.\n\n

  Pay careful attention to the specificity of the user's request. If the user requests a change to a specific word, sentence, or paragraph, only make that change and nothing else. If you are asked to make a more abstract change, such as phrasing, tone or inflection, include the change you intend to make in your response message and ask for confirmation from the user before updating the obituary document. If you are asked to make a change that is not specific or clear, ask for clarification from the user before making any changes.\n\n

  If the user asks for suggestions, provide a list of suggestions in your response message and ask for confirmation from the user before updating the obituary document. Once the user confirms, you can integrate the suggestions into the obituary document.
`;

export const analyzeDocumentPrompt = `
  You are an obituary writing assistant that helps users generate obituaries based on the content of a document file submitted by the user. Your task is to analyze the content of the document file and generate a new or revised obituary according to the user's instructions.\n\n

  Follow the guidelines for the obituary writer as outlined here:\n\n
  
  ${systemPrompt}\n\n

  The user will provide a document and optional instructions. If the user does not provide instructions, generate an obituary using the same words and style as the document file submitted by the user, with minor revisions to improve readability and flow.
`;

export const updateDocumentPrompt = (document: string | null) => `
  Revise the following document based on the user's request:

  ${document}
`;

export const createPromptFromEntryData = async (
  entryId: string,
  style: string,
  tone: string,
  toInclude: string = "",
  toAvoid: string = "",
  isReligious: boolean = false
) => {
  const [entry, entryDetails] = await Promise.all([
    getEntryById(entryId),
    getEntryDetailsById(entryId),
  ]);

  if (!entry || !entryDetails) {
    throw new Error("Entry not found");
  }

  let promptText = `
    Generate a ${style} obituary for the following person, using a ${tone} tone:\n\n

    Name: ${entry.name}\n\n
    Date of Birth: ${entry.dateOfBirth}\n
    Date of Death: ${entry.dateOfDeath}\n
    Location of Birth: ${entry.locationBorn}\n
    Location of Death: ${entry.locationDied}\n
    Cause of Death: ${entry.causeOfDeath}\n\n
    
    Biographical Info:\n
    ${entryDetails.occupation && "Occupation: " + entryDetails.occupation}\n
    ${entryDetails.jobTitle && "Job Title: " + entryDetails.jobTitle}\n
    ${entryDetails.companyName && "Company Name: " + entryDetails.companyName}\n
    ${entryDetails.yearsWorked && "Years Worked: " + entryDetails.yearsWorked}\n
    ${entryDetails.education && "Education: " + entryDetails.education}\n
    ${
      entryDetails.accomplishments &&
      "Accomplishments: " + entryDetails.accomplishments
    }\n
    ${entryDetails.hobbies && "Hobbies: " + entryDetails.hobbies}\n
    ${
      entryDetails.personalInterests &&
      "Interests: " + entryDetails.personalInterests
    }\n\n
    
    ${
      entryDetails.religious &&
      "Religious Information:" + `\n` + entryDetails.religious &&
      "Is Religious?: " +
        entryDetails.religious +
        `\n` +
        entryDetails.denomination &&
      "Denomination: " +
        entryDetails.denomination +
        `\n` +
        entryDetails.organization &&
      "Organization: " +
        entryDetails.organization +
        `\n` +
        entryDetails.favoriteScripture &&
      "Favorite Scripture: " + entryDetails.favoriteScripture + `\n\n`
    }

    ${
      isReligious
        ? "Please INCLUDE religious themes in the obituary text. Use the information provided above about the person's denomination and favorite scripture to inform your response."
        : "Please AVOID using religious themes in the obituary text. You may mention the person's denomination and favorite scripture if provided above, but avoid using religious language or themes that are not appropriate for the context."
    }\n\n

    ${
      entryDetails.militaryService &&
      "Military Service:" + `\n` + entryDetails.militaryBranch &&
      "Military Branch: " +
        entryDetails.militaryBranch +
        `\n` +
        entryDetails.militaryRank &&
      "Military Rank: " +
        entryDetails.militaryRank +
        `\n` +
        entryDetails.militaryYearsServed &&
      "Military Years Served: " + entryDetails.militaryYearsServed + `\n\n`
    }

    Family Info:\n
    ${
      entryDetails.survivedBy &&
      "Survived By: " + formatFamilyMembers(entryDetails.survivedBy)
    }\n
    ${
      entryDetails.precededBy &&
      "Preceded By: " + formatFamilyMembers(entryDetails.precededBy)
    }\n
    ${
      entryDetails.familyDetails &&
      "Family Details: " + entryDetails.familyDetails
    }\n\n

    Additional Details:\n
    ${
      entryDetails.serviceDetails &&
      "Funeral Service(s):" + formatServices(entryDetails.serviceDetails)
    }\n\n
    
    ${
      entryDetails.donationRequests &&
      "Donation Requests: " + entryDetails.donationRequests
    }\n
    ${
      entryDetails.specialAcknowledgments &&
      "Special Acknowledgments: " + entryDetails.specialAcknowledgments
    }\n
    ${
      entryDetails.additionalNotes &&
      "Additional Notes: " + entryDetails.additionalNotes
    }\n\n

    ${
      toInclude &&
      "Specific details, topics or themes to INCLUDE in this obituary: " +
        toInclude
    }\n\n
    ${
      toAvoid &&
      "Specific details, topics or themes to AVOID in this obituary: " + toAvoid
    }\n\n
  `;

  return promptText as string;
};

export const createPromptFromFile = async (
  entryId: string,
  instructions?: string
) => {
  const [entry, entryDetails] = await Promise.all([
    getEntryById(entryId),
    getEntryDetailsById(entryId),
  ]);

  if (!entry || !entryDetails) {
    throw new Error("Entry not found");
  }
  return `
    Generate an obituary for the following person, using the content of the file provided by the user:

    Name: ${entry.name}
    Date of Birth: ${entry.dateOfBirth}\n
    Date of Death: ${entry.dateOfDeath}\n
    Location of Birth: ${entry.locationBorn}\n
    Location of Death: ${entry.locationDied}\n
    Cause of Death: ${entry.causeOfDeath}\n\n

    ${
      instructions
        ? "The user has provided the following instructions for how they would like to use/alter the content: " +
          instructions
        : ""
    }
  `;
};
