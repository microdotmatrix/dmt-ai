import { cache, TAGS } from "@/lib/cache";
import { db } from "@/lib/db";
import { UserGeneratedImageTable } from "@/lib/db/schema";
import { desc, eq } from "drizzle-orm";

/**
 * Fetches epitaph IDs for images generated by a specific user
 * @param userId User ID to fetch epitaph IDs for
 * @returns Array of user generated images with their epitaph IDs
 */
export const getUserGeneratedEpitaphIds = cache(
  async (userId: string) => {
    // Fetch all generated images for this user
    const generatedImages = await db.query.UserGeneratedImageTable.findMany({
      where: eq(UserGeneratedImageTable.userId, userId),
      orderBy: (images, { desc }) => [desc(images.createdAt)],
    });

    // Return the epitaph IDs
    return generatedImages.map((image) => image.epitaphId);
  },
  [TAGS.userGeneratedEpitaphIds],
  { revalidate: 60, tags: [TAGS.userGeneratedEpitaphIds] }
);

/**
 * Fetches all user generated images from the database
 * @param userId User ID to fetch generated images for
 * @returns Array of user generated images or empty array if none found
 */
export const getUserGeneratedImages = cache(
  async (userId: string) => {
    // Fetch all generated images for this user
    const generatedImages = await db.query.UserGeneratedImageTable.findMany({
      where: eq(UserGeneratedImageTable.userId, userId),
      orderBy: (images, { desc }) => [desc(images.createdAt)],
    });

    return generatedImages;
  },
  [TAGS.userGeneratedImages],
  { revalidate: 60, tags: [TAGS.userGeneratedImages] }
);

export const getUserGeneratedImagesWithPagination = cache(
  async (userId: string, page: number = 1, pageSize: number = 6) => {
    const generatedImages = await db
      .select()
      .from(UserGeneratedImageTable)
      .where(eq(UserGeneratedImageTable.userId, userId))
      .orderBy(desc(UserGeneratedImageTable.createdAt))
      .limit(pageSize)
      .offset((page - 1) * pageSize);

    return generatedImages;
  },
  [TAGS.userGeneratedImages],
  { revalidate: 60, tags: [TAGS.userGeneratedImages] }
);
